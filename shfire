#!/bin/sh 
# shellcheck disable=SC2015,SC1090
authF="${XDG_CACHE_HOME:-$HOME/.cache/}/shfire/authkey"
authB="${XDG_CACHE_HOME:-$HOME/.cache/}/basefire/authkey" # basefire

## readCH needs echo, printf doesn't work with it, unless I mess with it
## so the following hack should work for any shell supporting -e
## that isn't a unix shell I can't make a case for
  
case "$(echo -e '\n')" in
  *-e*)
    unset e;;
  *)
    e="-e";;
esac

##
##
##

death() { rm $rtemp 2>/dev/null; echo $1; exit 1; } # Clean up on death
auth() {
  [ -f "./authkey" ] && { . "./authkey"; } || {
    [ -f "$authF" ] && { . "$authF"; } || {
      [ -f "$authB" ] && { . "$authB"; }
    }
  }
  [ "$AUTHKEY" ] || { death "AUTHKEY UNSET OR AUTHFILE MISSING... CANNOT CONTINUE.."; }
}

#
# ~'s Are used as delimiters, from that reason whenever a delimiter is needed
# regex will replace ~'s for -'s before using delimiters
# This will have no effect on ID's and the client should continue to work fine
# since * names are only displayed and never read
#

### Ratelimit handler func
Rlimit() {
  rtemp=$(mktemp)
  [ ! $5 ] && { 
    code=$(${1} -H "$2" -H "$3" -L "$4" -w '%{http_code}' --output $rtemp)
  }
  while [ "$code" -gt 300 ]; do
    num=$(jq .retry_after $rtemp); num=${num%[0-9][0-9][0-9]}
    sleep ".$num"
    [ ! $5 ] && {
      code=$(${1} -H "$2" -H "$3" -L "$4" -w '%{http_code}' --output $rtemp)
    }
  done
}

###
send() {
  postemp=$(mktemp); cat > $postemp
  IFS=""
  [ "$1" ] || { death "Channel ID not given... FALLING BACK..." ; }
  [ ! "$(wc -m < $postemp)" -gt "2000" ] || { death "MESSAGE LONGER THEN 2000 CHARS... FALLING BACK"; } # Handle max lenght
  curl -sX "POST" -H "Authorization: $AUTHKEY" -H "User-Agent: $UA" -L "https://discord.com/api/v6/channels/$1/messages" -d content="$(cat $postemp)" >/dev/null
  rm $postemp
}
readCH() {
  [ "$1" ] || { death "Channel ID not given... FALLING BACK..." ; }
  Rlimit "curl -sX GET" "Authorization: $AUTHKEY" "User-Agent: $UA" "https://discord.com/api/v6/channels/$1/messages"
  IFS=""; echo ${e} $(cat $rtemp | {
    [ "$2" ] || { jq '.[] | .author.username+": ",.content' -r; } &&  { jq '.[] | .author.id+"DIL",.content' -r; } 
  }| sed -e '/^$/d' -e 's/~/-/g' ) | tr '\n' '~' | sed -e 's/DIL~/DIL /g' -e 's/~/\n/g' 
  # echo -e is needed when using bash
}
listG() {
  #ui="$(echo -ne $'\355')"
  Rlimit "curl -sX GET" "Authorization: $AUTHKEY" "User-Agent: $UA" "https://discord.com/api/v6/users/@me/guilds"
  jq '.[] | [.name,.id]' -r $rtemp | sed -E -e 's/~/-/g' -e 's/"//g' -e 's/,/@/g' -e 's/\[//g' -e 's/\]//g' -e '/^$/d' -e 's/^[ \t]*//' | tr '\n' "~" | sed -E -e "s/@~/@/g" | tr '~' '\n'
}
listCH() {
  [ $1 ] || { death "Guild ID not given... FALLING BACK..."; }
  Rlimit "curl -sX GET" "Authorization: $AUTHKEY" "User-Agent: $UA" "https://discord.com/api/v6/guilds/$1/channels" 
  jq '.[] | [ if .type == 0 then .name,.id else "GROUPoVC" end ]' $rtemp | sed -E -e '/GROUPoVC/d' -e 's/~/-/g' -e 's/"//g' -e 's/,/@/g' -e 's/\[//g' -e 's/\]//g' -e '/^$/d' -e 's/^[ \t]*//' | tr '\n' "~" | sed -E -e "s/@~/@/g" | tr '~' '\n'
  # != type 0 means a group or vc which are useless to shfire and only annoying
}
listDM() {
  Rlimit "curl -sX GET" "Authorization: $AUTHKEY" "User-Agent: $UA" "https://discord.com/api/v6/users/@me/channels"
  jq '.[] | [ if .type != 3 then .recipients[].username,.id else "TYPE 3" end]' $rtemp | sed -E -e 's/~/-/g' -e 's/"//g' -e 's/,/@/g' -e 's/\[//g' -e 's/\]//g' -e '/^$/d' -e 's/^[ \t]*//' -e '/TYPE 3/d' | tr '\n' "~" | sed -E -e "s/@~/@/g" | tr '~' '\n'
  # TYPE 3 # Group DMs are not supported and will not be...
  # this regex just discrads them, since it would take extra sed -E + tr to manage them
}
usage() {
  [ $BASH ] && {
    printf "SHfire works better with a POSIX shell linked to /bin/sh...\n\n"
  }
  cat << 'EOF'
###
SHfire:
  Extremely basic Discord Client in POSIX sh
    - Because, Because? I'm insane?
Usage:
  <command outputing text> | ./send <CHANNEL ID>
    - Sends piped data to <CHANNEL ID>
  ./read <CHANNEL ID>
    - Outputs messages in CHANNEL
      - Extremely basic...
  ./list [DM|CH]
    - Lists Guilds/Channels/DMs
    CH:
      - Requires <GUILD ID>
###
EOF
}
auth; [ $(echo $AUTHKEY | cut -d' ' -f1 ) = "Bot" ] && { export UA="DiscordBot (SHFIRE)"; } || { export UA="Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.0"; }
case $(basename $0) in
  shfire)
    usage; exit 1
  ;;
  send)
    echo "Sending..."
    send "$1";
  ;;
  read)
    #echo "Reading..."
    # Better to not have this for basefire...
    readCH "$@"
  ;;
  list|CH|DM)
    [ "$1" = "CH" -o "$(basename $0)" = "CH" ] && {
      echo "Getting Channels.."
      listCH "${2:-$1}"
      exit 0
    }
    [ "$1" = "DM" -o "$(basename $0)" = "DM" ] && {
      echo "Getting DMs..."
      listDM
      exit 0
    }
    echo "Getting Guilds..." 
    listG
  ;;
esac; [ $rtemp ] 2>/dev/null && { rm $rtemp; } 
